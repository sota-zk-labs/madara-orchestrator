title Orchestrator Flow


==Job: SNOS execution==
orchestrator->Madara: get SNOS input
Madara --> orchestrator: input
orchestrator->CairoVM: execute SNOS
CairoVM-->orchestrator: Cairo PIE
orchestrator->DB:store PIE
DB-->orchestrator: ok
==Job Complete: SNOS execution==
opt with applicative recursion
loop check every X units of time
orchestrator->DB: PIEs of pending block
DB-->orchestrator: result
alt DA limit or max leaf limit is hit
orchestrator->CairoVM: get PIE of SNAR program
CairoVM-->orchestrator: PIE
orchestrator->DB: store PIE
DB-->orchestrator:ok
else limit not hit
note over orchestrator: do nothing
end
end
end
==JOB: Proving==
orchestrator->DB: get PIE of SNOS/SNAR from db_id
DB-->orchestrator: PIE
orchestrator->prover_api: submit PIE for proof creation
prover_api-->orchestrator: polling_id
group inside prover service (ignore for SHARP)
note over prover_api: aggregate multiple PIEs into\na single proof
prover_api->orchestrator: create job for proof submission
orchestrator-->prover_api: job_id
note over orchestrator: completed job to verify proof on chain
prover_api->orchestrator: polls for job status
orchestrator-->prover_api: success
note over prover_api: marks all PIEs with their polling_id as success
end
orchestrator->prover_api: polls over the polling_id and gets status
prover_api-->orchestrator: sucess
==Job Complete: Proving==
==Cron: Create jobs for state updates==
note over orchestrator: fetch last update_state job. if it's being processed\ndo nothing. if it's processed, create a job to process block n+1.\n\nthere might be optimisations possible to process multiple blocks in different jobs\nin parallel. however, this can cause complications in nonce management, so to\nstart with, we can do this sequentially as the bottleneck should ideally be\nthe proving
opt alt DA mode
==Job: DA Submission==
orchestrator->Madara: get state_udpate for block
Madara-->orchestrator: state_update
note over orchestrator: build blob
orchestrator->Alt DA: submit blob
Alt DA-->orchestrator: ok
==Job Complete: DA Submission==
end
==Job: Update State==
alt Eth DA
note over orchestrator: build state diffs similar to the alt DA
note over orchestrator: create equivalence proof between DA commitment\nand SNOS commitment
orchestrator->Settlement Layer: calldata for update state, blob data and equivalence proof in the same txn
else Starknet as DA
note over orchestrator: state diffs already in calldata of proof
orchestrator->Settlement Layer: calldata for update state
else Alt DA
note over orchestrator: create equivalence proof between DA commitment\nand SNOS commitment
orchestrator->Settlement Layer: calldata for update state and equivalence proof in same txn
end
DB-->orchestrator:ok
==Job Complete: Update State==